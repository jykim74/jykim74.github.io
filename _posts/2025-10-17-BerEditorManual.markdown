---
layout: post
title: "[BerEditor] Generating ML-DSA Key Pairs and Digital Signatures"
tags: [DigitalSignature, PQC, BerEditor, ML-DSA, SLH-DSA, GenerateKeyPair]
category: Software
---

**\[This feature is a licensed version feature\]**

If you need a license, you can obtain a 30-day license from the [Program Key Issuance](https://jykim74.mycafe24.com/user_reg.php) page.
This feature can be tested with BerEditor version 2.5.0 or later.

Let's use the [BerEditor](https://jykim74.github.io/software/2023/04/13/BerEditor.html) tool to generate a key pair using the PQC algorithm, Ml-DSA, and digitally sign it.

In this example, the execution environment is set to English. If the language is Korean, the message will be displayed in Korean.

## Generating an ML-DSA Key Pair

To create an electronic signature, you must first generate an ML-DSA key pair.

To generate a key pair, run BerEditor -> Service -> KeyPair Manager.

In KeyPair Manager, select "Generate KeyPair."

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdna%2FrvtR5%2FdJMb9W6uCWR%2FAAAAAAAAAAAAAAAAAAAAAHb2UxFj3oCyUdB38qY8RXv4jFMFE-zEqRVZ7del4zHt%2Fimg.png%3Fcredential%3DyqXZFxpELC7KVnFOS48ylbz2pIh7yKj8%26expires%3D1761922799%26allow_ip%3D%26allow_referer%3D%26signature%3DhUO%252B67IBmavuO%252BsyMHw50k0uxY4%253D">

In the KeyPair window, enter the key pair name and select ML DSA in the PQC section.

For KeyLength, select one of the three options (DSA\_44, DSA\_65, DSA\_87). It becomes

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdna%2Fqdeyi%2FdJMb9PTT0K4%2FAAAAAAAAAAAAAAAAAAAAAJRA_RsH7Uz2KZPUIiKoHAU_UTW5tpfibIStYu56XI7x%2Fimg.png%3Fcredential%3DyqXZFxpELC7KVnFOS48ylbz2pIh7yKj8%26expires%3D1761922799%26allow_ip%3D%26allow_referer%3D%26signature%3D%252FnJNwselnDtzZ4NHPaO2I9%252BQxiQ%253D">


Once the key pair is created, you can check it using the name you entered in the KeyPair Manager.

To view the key's detailed value, double-click the key.

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdna%2Fewxg3Z%2FdJMb9OAGMNz%2FAAAAAAAAAAAAAAAAAAAAAP2mUw6n37wtFkegQ1Ti2ldZnl9PM-9j34T16vuHbErL%2Fimg.png%3Fcredential%3DyqXZFxpELC7KVnFOS48ylbz2pIh7yKj8%26expires%3D1761922799%26allow_ip%3D%26allow_referer%3D%26signature%3DGir%252BL3FPsSN29Rr4N6rnnEFGsA8%253D">

In fact, the key pair generated by KeyPair Manager is for testing purposes, so the private key is stored as a pure value in PEM format. KeyPair Manager should be considered for testing purposes rather than for safe storage.
In the case of CertMan, certificates and private keys are stored, but since CertMan uses certificates together, for added security, the private key is encrypted and stored in PKCS8 format, and the private key password is asked when used.

## Creating an ML-DSA Digital Signature

To create a digital signature using the generated ML-DSA key pair, select BerEditor->Cryptography->Sign/Verify.

In that window, click the Sign radio button (selected by default).

For reference, in the case of ML-DSA, the Hash algorithm combo value is specifically ignored. In particular, in the case of EDDSA ML-DSA SLH-DSA, there is no need to specify a Hash value because it uses an internally fixed value rather than specifying a Hash algorithm. ML-DSA uses SHAKE as the hash algorithm internally.

Note that for ML-DSA, there is no specific digest algorithm specified.

This is fixed within ML-DSA and is not specified.

After entering the input data and clicking the Sign button, select the previously generated ML-DSA key in the KeyPair Manager (double-click).

Selecting the key will display the signature value in the Signature field.

Internally, the private key is read from KeyPair Manager and signed.

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdna%2FbzgQX7%2FdJMb9jtRBBF%2FAAAAAAAAAAAAAAAAAAAAAI_AFpHBUCTd28sqJ10K72_eoiOheQlPe2AmWKCN21tz%2Fimg.png%3Fcredential%3DyqXZFxpELC7KVnFOS48ylbz2pIh7yKj8%26expires%3D1761922799%26allow_ip%3D%26allow_referer%3D%26signature%3DqNPLcy8uaEbTmPgcoXQk%252B%252Bb7df0%253D">

Note that Use CertMan at the top should not be checked. This is because if Use CertMan is checked, the CertMan window will appear instead of the keyPair Manager window. Of course, if the ML-DSA key and certificate are in CertMan, the test can be performed in the same manner, but this is an example using the keyPair Manager. Also, if you want to test the private key and public key as files instead of the key pair created here, you can check Select each certificate and private key and select the corresponding files for testing.

## Verifying an ML-DSA Digital Signature

To verify a digital signature using the generated ML-DSA key pair, select BerEditor->Cryptography->Sign/Verify.

In that window, click the "Verify" radio button.

Enter the input data and signature values, then click the "Verify" button. The signature verification results will be displayed.

In the image below, the square mark is missing from the Signature section, but the Signature value must be entered.

<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdna%2FpN2EU%2FdJMb9bWTUlS%2FAAAAAAAAAAAAAAAAAAAAADUb3i_mdIv_MN4epRUhY5gc-xT9aKXFjr2oh66J7LBq%2Fimg.png%3Fcredential%3DyqXZFxpELC7KVnFOS48ylbz2pIh7yKj8%26expires%3D1761922799%26allow_ip%3D%26allow_referer%3D%26signature%3D96QVWAHBswbYkXW6B001C%252FKRdDI%253D">

In the case of signature verification, Use CertMan should not be checked, just like in the case of signature creation.

## Conclusion

There seems to be a rapid demand for the current PQC algorithm and its modifications.
And OpenSSL 3.5 LTS includes ML-DSA, ML-KEM, and SLH-DSA.

Now, to familiarize yourself with PQC and verify its values, BerEditor supports it.

For reference, for SLH-DSA, select only SLH-DSA when selecting a key pair, and the key pair generation, digital signature, and verification are all the same.
